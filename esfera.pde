class Esfera {
  PVector pos;
  float diameter;
  color c;
  int detail;
  PImage texture; // This is the texture used for both the globe and land detection
  PShape globe;
  int opacity;
  ArrayList<peopleComul> populationClusters;
  float scaleOffset;
  float[] americaX;
  float[] americaY;
  float[] americaZ;
  float[] EUX;
  float[] EUY;
  float[] EUZ;
  float[] ASIAX;
  float[] ASIAY;
  float[] ASIAZ;
  float[] AFRICAX;
  float[] AFRICAY;
  float[] AFRICAZ;
  float[] OCEANIAX;
  float[] OCEANIAY;
  float[] OCEANIAZ;

  Esfera(float x, float y, float z, float d, color c, int detail, PImage texture, int opacity) {
    pos = new PVector(x, y, z);
    diameter = d;
    this.c = c;
    this.detail = detail;
    this.texture = texture;
    this.opacity = opacity;
    populationClusters = new ArrayList<peopleComul>();
    this.globe = createShape(SPHERE, diameter / 2);  // Se crea la forma de la esfera
    this.globe.setTexture(texture);  // Se aplica la textura equirectangular
    this.globe.setStroke(false);
    //Scale was put assuming a radious of 600
    //Scale offset if the radious is different
    scaleOffset = d / 600;
    this.americaX = new float[]{-391.84818, -418.35168, -418.6028, -459.57803, -436.53552, -441.48764, -464.79156, -459.57803, -464.79156, -463.76596, -456.19656, -424.1256, -389.34158, -478.3452, -480.94318, -475.65598, -475.65598, -475.65598, -470.19693, -451.42465, -446.26105, -446.26105, -440.3835, -433.80145, -422.6306, -422.6306, -394.05228, -382.2186, -403.24786, -359.4621, -373.5624, -407.61777, -416.08484, -416.08484, -425.04028, -338.6587, -309.6249, -297.1278, -290.6997, -345.55392, -330.75555, -314.7667, -291.69656, -291.69656, -285.63144, -266.7605, -240.11795, -208.83647, -223.57271, -242.59692, -290.6997, -321.62665, -302.77353, -285.65015, -261.23096, -241.81097, -221.52068, -214.57639, -193.23979, -163.72278, -170.58702, -177.17836, -152.80414, -156.04178, -163.75572, -184.37132, -179.5075, -197.52353, -186.36346, -186.32608, -191.89474, -201.99121, -221.68799, -213.2156, -180.76646, -147.16098, -188.9954, -155.6591, -109.56167, -113.85931, -114.592316, -114.4777, -105.63074, -126.03494, -144.75888, -147.88022, -124.82433, -226.47433, -279.9861, -350.0879, -310.7834, -193.24583, -372.5473, -359.464, -157.88014, -147.35683, -177.58794, -146.49686, -165.84636, -329.5664, -341.49255, -352.8455, -351.14746, -227.44688, -231.54695, -251.42839, -257.35034, -270.94116, -201.32083, -138.41933, -131.34584, -114.56802, -89.88709, -72.51511, -61.81226, -41.066605, -48.65188, -36.91629, -4.968689, 33.51699, 20.093893, 1.6974905, -2.2345557, 66.938545, 93.624985, 99.50856, 119.45567, 123.30804, 127.11108, 97.03873, 64.43794, 80.88389, 83.72848, 91.72426, 69.747215, 88.25275, 118.542564, 137.81448, 128.28114, 112.99368, 118.13744, 118.13744, 133.27704, 138.2196, 138.2196, 147.93695, 132.24281, 109.16894, 109.16894, 99.62064, 208.49423, 184.10558, 196.45705, 163.29959, 199.93423, 185.11697, 218.56238, 243.45018, 234.74316, 227.72006, 177.25546, 174.36237, 162.10457, 148.8098, 119.33763, 73.7583, 81.91659, 90.61948, 146.61826, 137.45341, 127.409294, 48.306164, 67.48886, 77.60982, 31.59252, 3.2650607, 3.084243, 2.8984911, 2.7081017, -41.056725, -46.249134, -49.95104, -61.541416, -63.71745, -67.9922, -58.61472, -72.158165, -78.18864, -83.9377, -61.905, -12.073754, 11.452396, 34.937332, 37.300392, 39.52921, -21.257006, -46.292477, -4.700485, 22.601719, 62.080322, 226.41858, 226.41858, 208.5114, 202.11005, 221.65514, 221.65514, 214.3626, 209.07057, 209.84071, 162.08162, 131.36562, 100.17683, 68.62774, 45.889923, 64.73138, 104.33831, 123.90729, 23.699047, -31.949787, -14.381706, -117.55391, -124.873764, -127.21509, -152.47542, -122.48247, -117.55391, -97.721054, -.721054, -93.788864, -149.2425, -175.03362, -160.52383, -165.5701897, -263.76547, -305.89365, -233.45816, -181.78185, -372.02377, -297.80826, -266.83517, -244.02441};
    this.americaY = new float[]{15.681833, 16.742508, 8.372891, 83.63062, 79.437515, 44.297035, 46.635254, 83.63062, 46.635254, 55.921352, 55.00863, 51.14148, 46.94719, 57.679333, 28.891386, 76.762344, 76.762344, 76.762344, 105.147095, 120.091, 138.04753, 138.04753, 155.78319, 173.26962, 198.97087, 198.97087, 185.51645, 208.81209, 220.30072, 245.92792, 223.93007, 153.4318, 128.71274, 128.71274, 95.049, 273.86832, 306.31024, 318.4472, 324.3258, 236.41257, 256.7084, 276.08032, 300.35236, 300.35236, 306.12595, 322.7031, 342.9895, 372.6732, 364.02365, 361.71854, 324.3258, 293.68326, 276.4681, 294.12653, 316.01395, 331.11008, 345.01453, 349.37573, 361.61417, 375.90063, 391.6606, 406.79407, 370.9236, 339.54974, 356.33545, 314.11398, 305.82748, 294.5129, 266.20547, 290.1996, 222.90483, 254.55107, 237.59445, 187.01038, 158.54938, 129.07417, 165.76695, 136.52785, 33.892086, 13.729266, -4.586244, 6.876725, 44.66072, -10.104713, -38.509388, -23.86524, -20.14443, 36.548008, 45.183636, 56.496536, 50.15365, 31.185654, 148.80174, 178.0985, -70.50577, -65.80629, -106.4525, -91.84701, -103.97828, -59.97261, -48.12539, -35.4043, -49.486023, -107.07877, -97.897675, -106.30352, -91.03559, -83.81325, -109.98319, -82.97345, -93.7698, -96.50012, -88.92256, -103.57834, -110.3003, -119.58447, -141.67252, -157.10408, -161.3066, -157.86423, -183.26562, -184.35611, -207.03772, -195.9307, -184.6726, -242.62393, -291.25943, -300.65234, -309.925, -266.49063, -276.1911, -271.83005, -303.4654, -332.44528, -252.79172, -258.31787, -245.89496, -235.63496, -240.9577, -212.24242, -221.90424, -221.90424, -250.34178, -259.6257, -259.6257, -277.87833, -274.31363, -226.45108, -226.45108, -206.64488, -274.70596, -242.57217, -258.84613, -292.47903, -326.67517, -302.46506, -357.11194, -380.47162, -366.864, -407.85983, -432.1881, -425.13412, -395.2469, -362.8313, -373.56314, -385.16312, -427.76538, -473.21155, -458.95984, -430.27106, -398.8299, -321.34592, -317.87094, -365.5404, -353.20715, -354.60223, -334.9645, -314.7909, -294.11365, -312.11545, -351.5884, -379.7305, -287.61575, -297.78552, -317.7637, -339.84927, -337.23346, -365.41705, -392.2855, -358.92636, -391.97592, -391.99457, -390.60248, -417.0217, -441.94006, -418.14658, -416.11948, -435.51288, -458.9449, -477.79398, -425.2948, -425.2948, -391.65875, -492.78912, -484.31247, -484.31247, -468.37842, -456.81546, -511.6382, -507.36487, -516.17114, -523.1197, -528.1854, -513.0534, -498.19748, -491.43097, -486.86536, -481.22696, -450.5617, -466.90387, -392.7945, -417.25302, -425.07632, -416.6831, -409.26276, -392.7945, -415.87088, -415.87088, -399.1367, -434.58942, -424.8582, -438.67773, -452.4683, 222.17331, 159.25539, 93.248215, 72.607574, 91.04215, 240.83315, 274.75323, 295.199};
    this.americaZ = new float[]{-454.10248, -429.76917, -429.76917, -376.5554, -403.8891, -403.8891, -376.5554, -376.5554, -376.5554, -376.5554, -385.82217, -421.30988, -454.10248, -357.57373, -357.57373, -357.57373, -357.57373, -357.57373, -357.57373, -376.5554, -376.5554, -376.5554, -376.5554, -376.5554, -376.5554, -376.5554, -412.68204, -412.68204, -385.82217, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -412.68204, -429.76917, -429.76917, -429.76917, -429.76917, -429.76917, -429.76917, -429.76917, -429.76917, -421.30988, -421.30988, -412.68204, -412.68204, -412.68204, -438.05658, -438.05658, -438.05658, -438.05658, -438.05658, -438.05658, -438.05658, -438.05658, -421.30988, -403.8891, -446.16876, -469.4219, -454.10248, -476.80145, -483.99026, -483.99026, -504.38406, -490.9855, -522.9626, -504.38406, -504.38406, -528.74023, -549.7141, -567.1715, -544.7954, -563.1433, -588.9377, -588.9377, -588.9377, -588.9377, -588.9377, -586.5263, -581.0008, -581.0008, -586.5263, -554.41284, -528.74023, -483.99026, -510.78204, -567.1715, -446.16876, -446.16876, -574.5457, -577.88885, -563.1433, -574.5457, -567.1715, -497.78436, -490.9855, -483.99026, -483.99026, -544.7954, -544.7954, -534.3064, -534.3064, -528.74023, -554.41284, -577.88885, -577.88885, -581.0008, -586.5263, -586.5263, -586.5263, -586.5263, -581.0008, -577.88885, -577.88885, -577.88885, -570.97284, -570.97284, -563.1433, -563.1433, -563.1433, -539.6589, -510.78204, -504.38406, -497.78436, -528.74023, -528.74023, -528.74023, -510.78204, -490.9855, -539.6589, -534.3064, -534.3064, -534.3064, -534.3064, -549.7141, -544.7954, -544.7954, -528.74023, -522.9626, -522.9626, -510.78204, -516.9757, -544.7954, -544.7954, -554.41284, -490.9855, -516.9757, -504.38406, -497.78436, -461.85458, -483.99026, -429.76917, -394.9346, -412.68204, -376.5554, -376.5554, -385.82217, -421.30988, -454.10248, -454.10248, -454.10248, -412.68204, -357.57373, -357.57373, -394.9346, -429.76917, -504.38406, -504.38406, -469.4219, -483.99026, -483.99026, -497.78436, -510.78204, -522.9626, -510.78204, -483.99026, -461.85458, -522.9626, -516.9757, -504.38406, -490.9855, -490.9855, -469.4219, -446.16876, -476.80145, -454.10248, -454.10248, -454.10248, -429.76917, -403.8891, -429.76917, -429.76917, -412.68204, -385.82217, -357.57373, -357.57373, -357.57373, -403.8891, -276.24344, -276.24344, -276.24344, -307.6854, -328.0383, -232.79434, -276.24344, -276.24344, -276.24344, -276.24344, -307.6854, -328.0383, -328.0383, -328.0383, -357.57373, -394.9346, -376.5554, -438.05658, -412.68204, -403.8891, -403.8891, -421.30988, -438.05658, -421.30988, -421.30988, -438.05658, -385.82217, -385.82217, -376.5554, -357.57373, -490.9855, -490.9855, -544.7954, -567.1715, -461.85458, -461.85458, -461.85458, -461.85458};
    this.EUX = new float[]{-310.2858, -293.048, -266.32108, -229.21138, -238.52267, -242.6095, -249.6128, -284.80664, -334.12067, -371.19083, -397.44763, -388.35092, -362.69507, -317.08228, -268.30136, -294.9133, -288.16336, -281.88837, -271.94803, -310.17755, -337.35046, -399.71902, -398.414, -361.61905, -381.01984, -377.3121, -349.26434, -412.58008, -429.23785, -420.109, -434.82755, -458.82712, -456.68335, -343.85773, -372.69037, -363.43024, -282.26138, -281.857, -280.71014, -248.70776, -215.81035, -302.16708, -204.12503, -181.65482, -224.79816, -223.92786, -221.91888, -246.4383, -244.43192, -190.1141, -215.3516, -194.27632, -172.89024, -140.30333, -135.86853, -177.81601, -218.62608, -198.37975, -186.30267, -157.2328, -127.597046, -230.35954, -197.54056, -141.82896};
    this.EUY = new float[]{-424.8541, -436.92236, -453.70847, -473.54034, -492.77707, -501.22025, -515.6888, -508.21594, -477.2438, -449.01633, -425.95026, -416.20114, -438.7393, -472.75647, -502.05005, -502.41858, -490.91928, -480.22916, -463.29462, -462.46185, -443.03018, -445.9396, -444.48367, -474.9012, -460.90613, -456.42105, -478.22482, -424.8085, -407.96994, -399.2934, -413.28268, -386.465, -384.6593, -491.1518, -469.64896, -477.27982, -528.1723, -527.4156, -525.2696, -541.15686, -555.0966, -514.7762, -557.82324, -565.5398, -545.6448, -543.5323, -538.656, -536.21875, -531.85315, -553.5986, -522.71545, -530.9091, -538.2534, -547.65204, -530.34143, -517.78735, -501.92126, -510.26245, -479.19846, -489.5076, -498.05502, -452.60104, -453.51312, -473.89975};
    this.EUZ = new float[]{288.48178, 288.48178, 288.48178, 288.48178, 245.51523, 223.42542, 178.20935, 143.53307, 143.53307, 143.53307, 143.53307, 189.63168, 189.63168, 189.63168, 189.63168, 143.53307, 189.63168, 223.42542, 267.21225, 223.42542, 223.42542, 36.912773, 60.831947, 60.831947, 48.882137, 96.516304, 96.516304, 96.516304, 96.516304, 155.15544, -11.064371, -11.064371, -58.970737, -23.059593, -23.059593, -11.064371, 36.912773, 48.882137, 72.75742, 72.75742, 72.75742, 60.831947, 84.6538, 84.6538, 108.34021, 120.12077, 143.53307, 108.34021, 131.85329, 131.85329, 200.97815, 200.97815, 200.97815, 200.97815, 245.51523, 245.51523, 245.51523, 245.51523, 309.28976, 309.28976, 309.28976, 319.51025, 339.5638, 339.5638};
    this.AFRICAX = new float[]{-590.29224, -584.6224, -587.9276, -592.6156, -595.1708, -595.5838, -591.51154, -578.7209, -571.3647, -563.44666, -587.4481, -590.16895, -587.26434, -589.29834, -587.9398, -595.1666, -590.51483, -591.2143, -586.4111, -587.18933, -579.66846, -573.16656, -490.24765, -487.40195, -488.2439, -492.80365, -494.3558, -495.08612, -488.21344, -486.70364, -483.44214, -484.7233, -493.62796, -489.60907, -487.30542, -498.17383, -504.20642, -500.9268, -478.77747, -480.84177, -494.3558, -437.22583, -449.35837, -443.38077, -456.09622, -446.31482, -454.9787, -462.0052, -465.76706, -471.05063, -485.34116, -481.54776, -494.95624, -436.7918, -459.9976, -448.2092, -437.8266, -459.22327, -476.02112, -431.77884, -447.2497, -409.2962, -413.67538, -421.80283, -415.61722, -479.15555, -480.3085, -507.74997, -507.85156, -494.56912, -512.4957, -514.0371, -501.25986, -518.55896, -515.133, -515.133, -486.6762, -501.36517, -501.36517, -501.36517, -505.31464, -492.19693, -479.82828, -480.69305, -541.2616, -554.0702, -567.31866, -555.71594, -555.71594, -542.1131, -563.6761, -495.61166, -488.0741, -482.07123, -471.62415, -463.01672, -489.2766, -392.26382, -358.21686, -381.6129, -403.63553, -386.36276, -385.17706, -489.82867, -489.82867, -509.11008, -535.49506, -530.35175, -524.2653, -513.4176, -562.4817, -466.6643, -419.36826, -457.93658, -465.7828, -465.2631, -456.09586, -481.1121, -465.16904, -456.0394, -473.5545, -475.2971, -486.8751, -556.5596, -541.02094, -545.2343, -527.0894, -547.33545, -540.12695, -554.20166, -554.20166, -568.0959, -561.59796, -568.5569};
    this.AFRICAY = new float[]{-47.3249, -94.34653, -70.89242, -71.4577, -71.7658, -71.815605, -71.32458, -105.310036, -139.82292, -137.88524, -106.89813, -107.393234, -106.86469, -107.23482, -119.18177, -59.716366, -95.29745, -95.410324, -94.635185, -58.915962, -58.161346, -104.29932, -335.39676, -347.9609, -348.56198, -337.14542, -338.20728, -338.7069, -348.54022, -347.46237, -345.13394, -346.04858, -323.40976, -320.7767, -319.26743, -326.38806, -302.23657, -328.19174, -356.47107, -358.00806, -338.20728, -312.13968, -294.40567, -303.33334, -273.39786, -157.87833, -130.83144, -103.31369, -84.75579, -47.26312, -48.696968, -77.71231, -79.87618, -70.489586, -74.23454, -44.97131, -135.43687, -142.0557, -106.44889, -96.555336, -100.01496, -117.69603, -101.23443, -103.223366, -92.94124, -38.41577, -19.223951, -10.157797, -0.001452975, 9.890482, 41.08476, 10.278826, 10.023328, 41.570827, 72.591606, 72.591606, 88.55887, 80.9084, 80.9084, 80.9084, 50.69825, 49.38215, 28.820738, -0.0041258214, 109.71573, 112.31207, 79.943306, 78.30831, 78.30831, 76.39148, 79.430016, 110.82546, 140.34558, 159.75151, 188.37161, 153.43713, 109.40886, 165.8458, 177.47804, 189.06958, 199.98065, 231.59818, 200.52753, 69.02386, 69.02386, 71.74088, 42.926468, 85.58407, 117.232796, 114.807106, 125.7785, 254.94034, 274.75842, 300.0273, 305.16794, 278.89355, 273.39844, 226.49786, 218.9922, 237.41925, 200.2148, 178.90187, 183.25984, 172.16174, 216.0894, 205.22624, 248.14307, 169.30843, 191.06107, 196.03976, 196.03976, 151.12286, 173.72028, 139.13225};
    this.AFRICAZ = new float[]{96.516304, 96.516304, 96.516304, 60.831947, 24.928648, -11.064371, -70.90032, -118.28752, -118.28752, -153.34775, -58.970737, 12.934548, 60.831947, -35.04559, -11.064371, -47.017567, -47.017567, 36.912773, 84.6538, 108.34021, 143.53307, 143.53307, 84.6538, 36.912773, -11.064371, -58.970737, -35.04559, 12.934548, 12.934548, 48.882137, 84.6538, 72.75742, 108.34021, 131.85329, 143.53307, 72.75742, 120.12077, 36.912773, 60.831947, 24.928648, -35.04559, 267.21225, 267.21225, 267.21225, 277.9026, 368.61566, 368.61566, 368.61566, 368.61566, 368.61566, 349.3888, 349.3888, 329.60294, 405.27042, 378.00986, 396.3409, 387.25284, 359.07404, 349.3888, 405.27042, 387.25284, 422.63965, 422.63965, 414.03784, 422.63965, 359.07404, 359.07404, 319.51025, 319.51025, 339.5638, 309.28976, 309.28976, 329.60294, 298.94556, 298.94556, 298.94556, 339.5638, 319.51025, 319.51025, 319.51025, 319.51025, 339.5638, 359.07404, 359.07404, 234.51723, 200.97815, 178.20935, 212.24423, 212.24423, 245.51523, 189.63168, 319.51025, 319.51025, 319.51025, 319.51025, 349.3888, 329.60294, 422.63965, 447.4173, 422.63965, 396.3409, 396.3409, 414.03784, 339.5638, 339.5638, 309.28976, 267.21225, 267.21225, 267.21225, 288.48178, 166.71574, 277.9026, 329.60294, 245.51523, 223.42542, 256.415, 277.9026, 277.9026, 309.28976, 309.28976, 309.28976, 319.51025, 298.94556, 143.53307, 143.53307, 143.53307, 143.53307, 178.20935, 178.20935, 120.12077, 120.12077, 120.12077, 120.12077, 131.85329};
    this.ASIAX = new float[]{-89.14858, -126.06748, -115.669815, -108.869316, -132.3351, -116.738976, -109.02678, -130.87674, -134.83176, -150.856, -134.59552, -120.61059, -102.05548, -104.80614, -54.610542, -68.447975, -86.5062, -104.01108, -124.94387, -144.62825, -161.96259, -145.13412, -118.18605, -79.68171, -44.28562, -23.624924, 38.7314, 32.186893, 2.2980351, 30.759176, -26.396465, -3.0440755, -43.94007, -66.908844, -89.44963, -111.41826, -137.86076, -158.03523, -181.81723, -168.64908, -151.12587, -127.87616, -103.34877, -82.97122, -51.451485, -24.600143, -21.646154, -31.136215, 54.24064, 46.643353, 41.48352, 71.16252, 45.02815, 68.22277, 64.573524, 91.31544, 101.48212, 130.5522, 136.78354, 145.71722, -412.2049, -396.50827, -417.1151, -407.51688, -414.90063, -403.6353, -411.30954, -381.07266, -403.27203, -387.57312, -421.56802, -415.4612, -424.20517, -424.33774, -412.3892, -426.5233, -429.358, -410.97156, -397.8879, -377.0758, -368.10886, -388.42603, -407.34534, -430.2796, -417.2681, -397.8879, -388.42603, -174.50327, -185.72522, -196.65005, -207.26027, -201.01758, -190.72694, -180.13116, -163.7026, -146.6849, -129.13928, -111.12891, -86.50436, -67.66406, -77.73105, -89.80208, -101.729454, -125.07715, -147.62477, -169.2281, -194.69447, -209.05606, -148.64333, -158.03824, -177.3321, -195.98776, -219.75351, -225.48108, -196.68823, -230.37987, -202.51358, -178.7496, -160.1677, -141.00934, -127.95084, -107.98591, -141.00934, -81.981606, -103.27236, -115.25354, -104.80607, -146.5895, -132.63596, -118.20506, -103.34877, -88.12052, -67.33252, -46.11382, -40.576466, -40.576466, -49.951797, -68.44786, -71.590546, -66.6784, 89.00721, 89.463875, 124.11227, 150.95432, 165.38913, 148.1645, 118.84936, 95.310684, 152.68613, 174.05272, 189.3542, 174.05272, 141.62778, 95.310684, 85.800705, 74.99126, 53.02991, 8.233004, 117.337395, 147.18639, 101.75216, 90.10795, 77.899445, 70.24145, 113.03012, 130.34282, 218.33691, 196.46341, 195.5039, 176.83012, 157.51993, 130.90343, 123.90135, 144.79092, 162.54068, 185.28629, 222.1558, 199.1799, 186.0059, 159.66821, 254.22742, 270.83173, 250.63542, 248.00641, 241.6862, 156.71056, 180.7137, 203.4506, 224.9356, 215.4645, 194.88416, 173.60243, 151.69588, 136.78325, 324.1013, 334.35684, 362.85797, 357.6216, 346.61655, 344.96072, 338.16385, 306.9, 290.6839, 364.93747, 355.8663, 334.35684, 303.44385, 281.6943, 258.93094, 235.23563, 210.6937, 176.8072, 187.4596, 254.62752, 220.5644, 194.07889, 183.27193, 101.300705, 90.183975, 111.56724, 118.98361, 96.476616, 98.10252, 99.37537, 100.51551, 101.01267, 63.73282, 75.49022, 78.20238, 133.64442, 146.12462, 143.06358, 168.27713, 189.20831, 220.02718, 240.13986, 277.78568, 257.66672, 226.72563, 226.72563, 216.225, 192.2422, 432.14474, 471.1216, 456.07498, 448.2765, 485.41452, 483.1091, 468.88406, 493.39716, 488.46994, 505.97418, 465.89636, 458.5482, 333.36298, 352.2026, 301.441, 289.08945, 339.28146, 292.354, 316.01926};
    this.ASIAY = new float[]{-69.1887, -97.84166, -109.9386, -116.67678, -141.82538, -125.11081, -131.88582, -110.23603, -123.113525, -155.32721, -169.6117, -179.82536, -190.96794, -163.22589, -232.40126, -228.7084, -222.50694, -214.88219, -203.4249, -189.93506, -204.09854, -216.38895, -232.20714, -248.07039, -256.7623, -259.48016, -257.65863, -214.12166, -249.68178, -236.74149, -237.26753, -281.94226, -289.175, -284.73868, -278.48102, -270.44202, -257.96768, -246.12553, -229.11876, -212.52478, -225.32259, -239.28432, -250.8552, -258.31195, -266.38702, -270.19275, -237.74799, -236.6922, -232.48788, -199.92416, -177.80794, -305.01895, -299.54745, -356.26413, -337.20752, -330.96848, -367.81714, -358.53058, -375.6435, -400.17773, -136.60085, -177.0702, -147.54951, -172.29588, -175.4177, -199.98111, -183.68005, -170.17706, -161.07248, -154.80212, -198.46654, -226.96802, -210.17245, -290.3056, -307.04233, -317.5658, -293.74014, -318.95755, -335.1369, -358.39276, -349.8701, -327.16727, -303.287, -269.76413, -310.6749, -335.1369, -327.16727, -284.11435, -276.90884, -269.2603, -261.18106, -253.31427, -261.15018, -268.56833, -278.88644, -288.20084, -296.47806, -303.68823, -311.5978, -316.2242, -303.41153, -300.06042, -296.22928, -287.1522, -276.2383, -263.55743, -245.34615, -233.23001, -341.25543, -326.5002, -316.43613, -305.23315, -288.59467, -284.14218, -293.25424, -267.5994, -289.26212, -304.52075, -314.6913, -323.72934, -329.10925, -336.18945, -323.72934, -188.21341, -202.90555, -196.34782, -163.22595, -228.29985, -236.67912, -244.20659, -250.8552, -256.60098, -262.82242, -267.3627, -235.25775, -235.25775, -233.44695, -228.70844, -239.20924, -194.16298, -159.4185, -117.87595, -163.52803, -198.8946, -139.75162, -125.19704, -289.78424, -298.3554, -273.47217, -260.39532, -249.48961, -260.39532, -279.35938, -298.3554, -268.5859, -271.80225, -276.92593, -281.83746, -256.3827, -240.49182, -262.9575, -232.86543, -213.93231, -192.90144, -184.68298, -212.97066, -312.9159, -281.56726, -305.54224, -316.71585, -326.74957, -338.29294, -320.1975, -300.3453, -291.12238, -277.20157, -248.63327, -241.7177, -225.73021, -219.35089, -284.5273, -268.77048, -248.72787, -277.56485, -270.4914, -404.98615, -394.86014, -364.39508, -351.53937, -336.73752, -349.05194, -360.1101, -369.87222, -375.6427, -334.76297, -345.3559, -345.97018, -369.386, -387.92776, -418.63217, -410.38373, -459.14438, -474.9563, -362.15997, -353.15787, -345.3559, -353.5954, -371.1552, -387.3792, -402.20898, -415.59122, -431.09985, -409.59998, -416.04282, -435.0611, -447.50436, -473.62854, -72.560555, -85.986725, -55.4943, -37.01036, -30.009462, -24.170204, -18.243954, -10.243868, -2.1782537, -43.7494, -47.494164, -42.881893, 26.87467, 23.348175, 37.819977, 70.838936, 79.65025, 92.62395, 101.0907, 91.57668, 84.94414, 74.74389, 74.74389, 71.28218, 72.02006, 42.679115, 46.528515, 45.042496, 44.272305, 47.9401, 67.3136, 65.331566, 88.9902, 78.049, 91.25862, 84.03009, 82.70476, -82.132965, -86.77461, -142.4913, -166.12566, -128.31447, -160.3109, -134.19585};
    this.ASIAZ = new float[]{589.29236, 578.38916, 578.38916, 578.38916, 567.779, 575.082, 575.082, 575.082, 571.5448, 559.5676, 559.5676, 559.5676, 559.5676, 567.779, 550.46106, 550.46106, 550.46106, 550.46106, 550.46106, 550.46106, 540.47375, 540.47375, 540.47375, 540.47375, 540.47375, 540.47375, 540.47375, 559.5676, 545.57654, 550.46106, 550.46106, 529.6218, 523.87695, 523.87695, 523.87695, 523.87695, 523.87695, 523.87695, 523.87695, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 550.46106, 550.46106, 550.46106, 563.7861, 571.5448, 511.76102, 517.9226, 477.93463, 492.0583, 492.0583, 463.0464, 463.0464, 447.4173, 422.63965, 414.03784, 414.03784, 405.27042, 405.27042, 396.3409, 396.3409, 396.3409, 431.0724, 414.03784, 431.0724, 378.00986, 368.61566, 368.61566, 309.28976, 309.28976, 277.9026, 298.94556, 298.94556, 298.94556, 298.94556, 319.51025, 319.51025, 319.51025, 319.51025, 298.94556, 298.94556, 319.51025, 498.82626, 498.82626, 498.82626, 498.82626, 505.39468, 505.39468, 505.39468, 505.39468, 505.39468, 505.39468, 505.39468, 505.39468, 505.39468, 511.76102, 511.76102, 511.76102, 511.76102, 511.76102, 511.76102, 511.76102, 511.76102, 470.58463, 477.93463, 477.93463, 477.93463, 477.93463, 477.93463, 485.09348, 485.09348, 485.09348, 485.09348, 485.09348, 485.09348, 485.09348, 485.09348, 485.09348, 563.7861, 555.12537, 555.12537, 567.779, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 535.15485, 550.46106, 550.46106, 550.46106, 550.46106, 545.57654, 563.7861, 571.5448, 581.4649, 563.7861, 545.57654, 559.5676, 567.779, 511.7616, 511.7616, 511.7616, 511.7616, 511.7616, 511.7616, 511.7616, 511.7616, 529.6224, 529.6224, 529.6224, 529.6224, 529.6224, 529.6224, 529.6224, 545.57697, 555.1258, 563.78644, 559.568, 545.57697, 463.0471, 492.05893, 477.9353, 477.9353, 477.9353, 477.9353, 492.05893, 498.8269, 498.8269, 498.8269, 498.8269, 511.7616, 523.87756, 535.15533, 463.0471, 463.0471, 485.09418, 470.58536, 477.9353, 414.03867, 414.03867, 431.07318, 431.07318, 447.41803, 447.41803, 447.41803, 447.41803, 447.41803, 378.0107, 359.07498, 329.6039, 309.29074, 298.94656, 256.41605, 277.9036, 234.51828, 223.42647, 309.29074, 329.6039, 359.07498, 378.0107, 378.0107, 378.0107, 378.0107, 378.0107, 378.0107, 396.34177, 349.38974, 349.38974, 349.38974, 319.5112, 586.91833, 586.91833, 586.91833, 586.91833, 591.43195, 591.43195, 591.43195, 591.43195, 591.43195, 594.99927, 593.3342, 593.3342, 584.30896, 581.4658, 581.4658, 571.54584, 563.78723, 550.4624, 540.4753, 523.87866, 535.1564, 550.4624, 550.4624, 555.12665, 563.78723, 414.04034, 368.61838, 387.25543, 396.34348, 349.3916, 349.3916, 368.61838, 329.6058, 339.56662, 309.29272, 368.61838, 378.0125, 492.06024, 477.9367, 498.8282, 498.8282, 477.9367, 498.8282, 492.06024};
    this.OCEANIAX= new float[]{368.8648, 365.67218, 381.66245, 400.1091, 435.4188, 415.19568, 428.8484, 432.80023, 425.99615, 445.88635, 475.43793, 458.2592, 465.60828, 476.39682, 462.26016, 473.14767, 469.7059, 432.80023, 445.88635, 391.22775, 349.06586, 315.44595, 270.6574, 234.76108, 220.2114, 237.15639, 230.88042, 241.42007, 228.0081, 229.6825, 375.40317, 383.85754, 373.01932, 265.1471};
    this.OCEANIAY= new float[]{411.5168, 407.95505, 362.7511, 350.92236, 324.18796, 349.71402, 332.83093, 335.89798, 344.4862, 318.32187, 272.2173, 300.23657, 279.09906, 260.25647, 195.44025, 167.36963, 176.79846, 193.27649, 199.12039, 147.2591, 155.88307, 180.6121, 227.97128, 251.59628, 289.1951, 311.44833, 316.12885, 330.56006, 339.94986, 328.06808, 342.77618, 323.3183, 354.53622, 334.1267};
    this.OCEANIAZ= new float[]{233.6507, 244.65596, 287.655, 277.06717, 255.56335, 255.56335, 255.56335, 244.65596, 244.65596, 244.65596, 244.65596, 244.65596, 255.56335, 255.56335, 328.814, 328.814, 328.814, 367.86972, 348.62073, 430.41327, 462.44293, 477.3606, 484.5345, 491.5146, 477.3606, 454.70517, 454.70517, 438.68713, 438.68713, 446.7855, 318.71136, 328.814, 308.48126, 421.96725};
    if (d != 600){
      //Adjust the scale for a radious different of 600
      this.americaX = multiplyByConstant(this.americaX, scaleOffset);
      this.americaY = multiplyByConstant(this.americaY, scaleOffset);
      this.americaZ = multiplyByConstant(this.americaZ, scaleOffset);
      this.EUX = multiplyByConstant(this.EUX, scaleOffset);
      this.EUY = multiplyByConstant(this.EUY, scaleOffset);
      this.EUZ = multiplyByConstant(this.EUZ, scaleOffset);
      this.ASIAX = multiplyByConstant(this.ASIAX, scaleOffset);
      this.ASIAY = multiplyByConstant(this.ASIAY, scaleOffset);
      this.ASIAZ = multiplyByConstant(this.ASIAZ, scaleOffset);
      this.AFRICAX = multiplyByConstant(this.AFRICAX, scaleOffset);
      this.AFRICAY = multiplyByConstant(this.AFRICAY, scaleOffset);
      this.AFRICAZ = multiplyByConstant(this.AFRICAZ, scaleOffset);
      this.OCEANIAX = multiplyByConstant(this.OCEANIAX, scaleOffset);
      this.OCEANIAY = multiplyByConstant(this.OCEANIAY, scaleOffset);
      this.OCEANIAZ = multiplyByConstant(this.OCEANIAZ, scaleOffset);
    }
}
  float[] multiplyByConstant(float[] arr, float constant) {
  for (int i = 0; i < arr.length; i++) {
    arr[i] *= constant; // Multiply each element by the constant
  }
  return arr; // Return the modified array
}
  boolean itTouch(PVector centro1, float diametro1, PVector centro2, float diametro2) {
    float radio1 = diametro1 / 2;
    float radio2 = diametro2 / 2;

    // Calcula la distancia entre los centros de las dos esferas
    float distancia = PVector.dist(centro1, centro2);

    // Verifica si la distancia es menor o igual a la suma de los radios
    return distancia <= (radio1 + radio2);
  }
  void lookForAfectedPeople(PVector centro2, float diametro2){
    for(peopleComul peopleGroup : populationClusters){
      if(itTouch(peopleGroup.pos,peopleGroup.diameter,centro2,diametro2))println("se tocan si funciona");
    }
  
  
  }

  void draw() {
    noStroke();

    pushMatrix();
    translate(pos.x, pos.y, pos.z);

    sphereDetail(detail);

    if (texture != null) {
      // Create a globe shape with the texture
      fill(255);
      globe = createShape(SPHERE, diameter);
      globe.setTexture(texture);

      shape(globe);
    } else {
      colorMode(HSB);
      fill(c, opacity);
      sphere(diameter);
    }

    // Draw population clusters
    drawPopulationClusters();

    popMatrix();
  }

  void drawPopulationClusters() {
    for (peopleComul cluster : populationClusters) {
      cluster.draw();
    }
  }


  void generatePopulationClusters() {

    long  AsiaTotal = 4785060131L;
    long  AfricaTotal = 1494993923;
    long  AmericaTotal = 1051020865;
    long EUTotal = 741651866;
    long  OceaniaTotal = 46109212;
    println(americaX.length);
    println(EUX.length);
    println(AFRICAX.length);
    println(ASIAX.length);
    println(OCEANIAX.length);


    for (int i =0; i<americaX.length; i++) {
      peopleComul cluster = new peopleComul(americaX[i], americaY[i], americaZ[i], 10, #ff0000, 10, 255, 1000);
      populationClusters.add(cluster);
    }


    for (int i =0; i<EUX.length; i++) {
      peopleComul cluster = new peopleComul(EUX[i], EUY[i], EUZ[i], 10, #1e88e5, 10, 255, 1000);
      populationClusters.add(cluster);
    }


    for (int i =0; i<AFRICAX.length; i++) {
      peopleComul cluster = new peopleComul(AFRICAX[i], AFRICAY[i], AFRICAZ[i], 10, #5e35b1, 10, 255, 1000);
      populationClusters.add(cluster);
    }


    int indianCounter = 50;
    for (int i =0; i<ASIAX.length; i++) {
      if (indianCounter>0) {
        peopleComul cluster = new peopleComul(ASIAX[i], ASIAY[i], ASIAZ[i], 10, #f4d03f, 10, 255, 1000);
        populationClusters.add(cluster);
        indianCounter--;
      }
      peopleComul cluster = new peopleComul(ASIAX[i], ASIAY[i], ASIAZ[i], 5, #f4d03f, 10, 255, 1000);
      populationClusters.add(cluster);
    }


    for (int i =0; i<OCEANIAX.length; i++) {
      peopleComul cluster = new peopleComul(OCEANIAX[i], OCEANIAY[i], OCEANIAZ[i], 10, #82e0aa, 10, 255, 1000);
      populationClusters.add(cluster);
    }
  }



  // Helper method to determine if a pixel color represents land, excluding any type of blue
  boolean isLand(color pixelColor) {
    // Obtener los valores RGB del píxel
    int redValue = int(red(pixelColor));
    int greenValue = int(green(pixelColor));
    int blueValue = int(blue(pixelColor));

    // Comprobar si el color es exactamente blanco (RGB 255, 255, 255)
    boolean isWhite = (redValue == 255 && greenValue == 255 && blueValue ==255);

    return isWhite;
  }



  void update(float x, float y) {
    pos.x = x;
    pos.y = y;
  }
}
